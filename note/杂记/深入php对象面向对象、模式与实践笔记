# 什么是设计模式？为何使用它们 #

- 设计模式
    
    - 分析过的问题和问题解决方案所阐释的优秀实践
    
- 学习模式的关键点

    - 意图 
    
        - 模式目的的简要概括，
    
    - 动机
    
        - 需要被解决的问题
        
    - 适用性
    
        - 检验不同情况下你是否可以应用某模式
        
    - 结构/交互
    
        - 可能包含UML类图和交互图，用于描述解决方案中类和对象之间的关系
        
    - 实现
    
        - 着重于解决方案的细节
        
    - 示例代码
    
        - 描述模式的核心内容
        
     - 已知应用
     
        - 举出三个真实系统使用同一个模式的事例
        
    - 相关模式
    
        - 模式与模式合作中存在了哪些模式
        
        
        
## 模式原则 ##

- 组合

    - 如何通过聚合对象来获得比只使用继承更好的灵活性
    
- 解耦

    - 如何降低系统中元素的依赖性
    
- 接口的作用

    - 模式和多态
    
- 模式分类

    
1. 组合优于继承

   - 显示调用另一个对象的方法来执行一个请求的方式便是所谓的"委托"    
   
2. 解耦

    - 思想
        
        - 将依赖性高的代码组合到公共接口，同时 通过一个方法集中你的入口代码 ，把一个具体的实现
        隐藏到一个干净的接口后面，正是封装
        
 3. 针对接口的编程而不是针对实现的编程
 4. 变化的概念封装起来
    
    - 积极搜寻类中变化的元素，并评估他们是否适合新的类型来封装
    
    - 好处
        1. 专注于职责
        2. 通过组合提高灵活性
        3. 使继承层级体系更紧凑和集中
        4. 减少重复
        
 5. 模式分类
 
    1. 用于生成对象的模式
    
        - 关注对象的实例化
        
    2. 用于组织对象和类的模式
    
        - 组织对象的关系，帮助我们如何合并对象和类
        
    3. 面向任务的模式
    
        - 让类和对象合作来达成特定目标
        
     4. 企业模式
     
        - 用于处理表现逻辑和应用逻辑
        
     5. 数据库模式
     
        - 数据库存取数据及对象-数据库映射的相关模式
        
 
 